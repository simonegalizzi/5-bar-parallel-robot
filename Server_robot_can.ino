
#include <WiFi.h>
#include <ESP32WebServer.h>
#include <WebSocketsServer.h>
#include <df_can.h>
#include <SPI.h>


// Value Limits
#define P_MIN -12.5f
#define P_MAX 12.5f
#define V_MIN -12.5f
#define V_MAX 12.5f




static const byte MCP2515_SCK  = 18 ; // SCK input of MCP2517 
static const byte MCP2515_MOSI = 23 ; // SDI input of MCP2517  
static const byte MCP2515_MISO = 19 ; // SDO output of MCP2517 
const int SPI_CS_PIN = 5;
  
MCPCAN CAN(SPI_CS_PIN);                                    // Set CS pin
// Write wifi network and password
const char* ssid_wifi = "******";
const char* password_wifi = "******"; 
// Static variables used in WebSocketEvent_vd() function to manage data recieved from the webpage
static char *dataJoy;
static int16_t coordenadas[7];
static int16_t i;
char comando[7];
String angoloStringa;
String setup_motore= "";  //variabile per memorizzare il comando che arriva dal ws
bool ab = false;   //variabile per concatenare cio che arriva dal ws x setup motore
bool invioA=false;
bool invioB=false;
//Variables used in the handleData() function to properly detect when the buttons are pressed
int posX_joy = 0;
int posY_joy = 190;
byte save, play, stap, reset, demoM, demoC; 
byte inviosetup[7];
bool primo_avvio = true;
//Web page developed in HTML and JS codified in HEX
static const char INDEX_HTML[] PROGMEM ={0x1f,0x8b,0x08,0x08,0x6d,0xb5,0xce,0x62,0x00,0xff,0x69,0x6e,0x64,0x65,0x78,0x2e,0x68,0x74,0x6d,0x6c,0x2e,0x67,0x7a,0x00,0xed,0x5c,0x7b,0x73,0xdb,0xb8,0xae,0xff,0x3b,0xf9,0x14,0xac,0x3b,0xb7,0xb1,0x5b,0x3b,0xb6,0x93,0x66,0xdb,0xa6,0x76,0xf6,0xa6,0x4e,0xba,0x27,0x7b,0x93,0x6c,0xb6,0x4e,0x1f,0x9e,0x33,0x67,0x76,0x64,0x8b,0x8e,0xb5,0x95,0x25,0x1d,0x49,0x76,0x92,0x6e,0xfb,0xdd,0xcf,0x0f,0x20,0x25,0x51,0x0f,0x3b,0x69,0x6f,0xff,0x38,0xb3,0x53,0xbf,0x05,0x82,0x00,0x08,0x82,0x20,0x48,0x42,0xee,0x3d,0x38,0xfa,0x6d,0x70,0x39,0xba,0x38,0x16,0xb3,0x78,0xee,0x1e,0x6c,0xf6,0xf8,0xab,0x37,0x93,0x96,0x7d,0xd0,0x9b,0xcb,0xd8,0x02,0x3c,0x0e,0x5a,0xf2,0xdf,0x0b,0x67,0xd9,0xaf,0x0d,0x7c,0x2f,0x96,0x5e,0xdc,0xba,0xbc,0x0d,0x64,0x4d,0x4c,0xd4,0x55,0xbf,0x16,0xcb,0x9b,0xb8,0x4d,0x15,0x5f,0x8a,0xc9,0xcc,0x0a,0x23,0x19,0xf7,0xdf,0x5e,0xbe,0x6e,0x3d,0xaf,0x1d,0x6c,0x6e,0x6c,0x28,0x2a,0x9e,0x35,0x97,0xfd,0xda,0xd2,0x91,0xd7,0x81,0x1f,0xc6,0x46,0xdd,0x6b,0xc7,0x8e,0x67,0x7d,0x5b,0x2e,0x9d,0x89,0x6c,0xf1,0x45,0x53,0x38,0x9e,0x13,0x3b,0x96,0xdb,0x8a,0x26,0x96,0x2b,0xfb,0x9d,0xed,0x67,0x8a,0x50,0xec,0xc4,0xae,0x3c,0xf8,0xf5,0xf0,0xfc,0xed,0x50,0xfc,0x1a,0x8a,0xf1,0xad,0x18,0x3a,0x73,0xff,0x53,0xaf,0xad,0x0a,0x80,0x52,0x60,0x67,0xcb,0x68,0x12,0x3a,0x41,0xec,0xf8,0x9e,0xc1,0x91,0x09,0x94,0x44,0xb3,0x16,0xf1,0xcc,0x0f,0x0d,0x34,0xa6,0x2d,0x16,0x91,0xe3,0x5d,0x89,0x37,0xfe,0x58,0x86,0xb1,0x2f,0x8e,0x1e,0x3d,0xdc,0x7d,0xf1,0xf2,0x70,0xee,0x4c,0x7c,0xa1,0x48,0x2b,0x3a,0x51,0x7c,0x4b,0x02,0x3c,0xde,0xfc,0x6b,0x73,0x63,0xec,0xdf,0xb4,0x22,0xe7,0x13,0xaa,0xed,0x8b,0xb1,0x1f,0xda,0x32,0x6c,0x01,0xf4,0x72,0xf3,0xcb,0xe6,0xd8,0xb7,0x6f,0x09,0x63,0x6e,0x85,0x57,0x8e,0xb7,0x2f,0x3a,0x01,0xc0,0x1b,0x81,0x65,0xdb,0x8c,0xac,0x2e,0xa7,0xe0,0xdf,0x9a,0x5a,0x73,0xc7,0xbd,0xdd,0x17,0x73,0xdf,0xf3,0xa3,0xc0,0x9a,0x48,0x14,0x4c,0x7c,0xd7,0x0f,0xf7,0xc5,0xc3,0x29,0x3f,0x88,0xde,0x76,0xe8,0x5f,0x13,0x3d,0xdb,0x89,0x02,0xd7,0x02,0xba,0xe3,0xb9,0x8e,0x27,0x5b,0x53,0x57,0x12,0xa5,0x89,0x2b,0x2d,0x54,0x18,0xfb,0xf1,0x8c,0xb1,0x41,0x60,0x31,0xf7,0x4e,0xad,0x58,0x86,0x96,0x8b,0x7a,0x42,0x4c,0x5d,0xdf,0x8a,0xf7,0x85,0x2b,0xa7,0xf1,0x4b,0x5c,0xb2,0xf6,0xf7,0x45,0x77,0xef,0x7f,0xe8,0x6a,0xee,0x78,0xaa,0x3f,0xf6,0xc5,0x6e,0x87,0x65,0x4b,0x69,0x0c,0x64,0xbc,0x9e,0xc4,0xb3,0xce,0x4a,0x12,0x0f,0xff,0xf4,0x6f,0x77,0x8e,0x9c,0x25,0x09,0xae,0xca,0x9e,0xed,0xa9,0x96,0xcf,0xa4,0x73,0x35,0x8b,0xf7,0x9f,0x3d,0xef,0xf2,0xa5,0xd6,0xd2,0x0e,0x0a,0x75,0xb5,0x28,0x76,0x26,0x1f,0x95,0x8a,0x49,0xad,0x90,0x34,0xb8,0x11,0x91,0xef,0x3a,0xb6,0x78,0xf8,0xfa,0x75,0x07,0x8f,0x84,0x01,0x63,0xee,0xac,0x40,0x9d,0x4e,0x12,0x05,0xa2,0xe7,0xda,0xba,0xeb,0xf0,0x8b,0x6d,0x1e,0x3f,0xa8,0x9b,0x04,0x83,0xfb,0xb5,0xb1,0x35,0xf9,0x78,0x15,0xfa,0x0b,0xcf,0x6e,0x29,0xfd,0x3f,0xec,0xee,0xd2,0xf3,0x25,0xfa,0x1d,0xa8,0x13,0x58,0x8a,0x0c,0xa9,0xd2,0xac,0x5b,0x65,0x98,0x80,0xa2,0xcc,0x76,0x96,0xc2,0xb1,0xfb,0x35,0xdd,0xf2,0xda,0x41,0xaf,0x0d,0x10,0xf3,0x4c,0x09,0x98,0xc4,0x2e,0xfc,0x08,0xf6,0xef,0x7b,0xe2,0xc3,0x7e,0xcf,0xf1,0x82,0x45,0x9c,0xd6,0xa6,0x92,0x4f,0x28,0x91,0x1f,0x6a,0x22,0xc6,0x18,0x54,0x43,0xaf,0x26,0x96,0x96,0xbb,0xc0,0x45,0xa7,0x76,0xf0,0x48,0x7a,0x51,0xf0,0xb2,0xe7,0x5a,0x63,0xe9,0x72,0xb5,0xc0,0x8f,0x6e,0x6a,0x07,0x9d,0x5e,0x9b,0x41,0x07,0xbd,0x71,0x98,0xbe,0x0d,0x4e,0xa3,0x95,0x9c,0x46,0x95,0x9c,0xba,0x2f,0x56,0xf0,0xba,0xad,0x1d,0xa0,0xac,0x9a,0x9b,0xd1,0xdc,0x1e,0x99,0xb9,0x98,0xc2,0xb2,0xc9,0xa9,0x60,0x3c,0x89,0xa1,0xe5,0x45,0xe2,0x6c,0x58,0x13,0xe0,0x0b,0xe0,0x0e,0x8d,0x44,0x28,0xbc,0x5f,0x7b,0xb8,0xbb,0x33,0x38,0xda,0xdd,0xa1,0x81,0xd6,0x8b,0xad,0xb1,0xea,0xac,0x89,0xc5,0xa3,0xfa,0x00,0x46,0x26,0x44,0x2f,0x38,0x38,0x3d,0x19,0x5e,0x1e,0x8a,0xc1,0x6f,0x67,0x87,0xe7,0x47,0x27,0xbd,0x76,0xa0,0x0b,0xda,0x29,0x1e,0xea,0x42,0x8c,0xd8,0x3e,0xf8,0x5d,0xb4,0xc4,0xef,0x62,0xb2,0x08,0x43,0xc8,0x22,0x2e,0x4e,0x8e,0x78,0xc4,0x87,0xbe,0xeb,0xca,0x50,0x3c,0x12,0xa7,0x17,0xaf,0x45,0x3d,0x92,0x52,0x04,0x30,0x15,0xcb,0xb3,0x85,0x1b,0x4c,0xc5,0xd4,0x0f,0x81,0x35,0x9f,0xe3,0x3a,0x6a,0xc0,0xdd,0xc0,0x35,0xe2,0x4d,0xe6,0x83,0x76,0x5d,0x80,0x60,0x10,0xfa,0xe4,0xd6,0xc0,0xc9,0x72,0xc5,0x95,0xe5,0x78,0xba,0xec,0x04,0x65,0x0e,0x9a,0x7c,0x15,0x5a,0xac,0x66,0xa3,0xe8,0x08,0x45,0xb0,0x4c,0x67,0x89,0x92,0xa5,0x34,0x4b,0x4e,0x51,0x12,0x59,0xf1,0x42,0xd7,0x71,0x9d,0xb9,0x13,0xeb,0xa2,0x37,0x28,0x0a,0xad,0x79,0x20,0x02,0x0b,0x5f,0x12,0xba,0xd4,0x05,0xaf,0x51,0xe0,0xfa,0xd7,0x80,0x47,0x91,0x98,0x3a,0x2e,0x4a,0xc8,0x6f,0xc5,0xce,0x5c,0x52,0xfb,0xa2,0xd8,0xf2,0xe2,0x54,0x70,0xdd,0xd5,0xaa,0x5b,0xc7,0x8b,0x38,0x26,0xf7,0xa8,0x3b,0x76,0x68,0xb9,0x4b,0x4b,0xa0,0x23,0x55,0xef,0xd7,0x84,0xef,0x4d,0x5c,0x0c,0xa6,0x7e,0x2d,0xb2,0x96,0x12,0x56,0x51,0x6f,0xc0,0xf6,0x55,0xcf,0xeb,0xfe,0x5f,0x43,0xed,0x70,0xb9,0x74,0x2c,0x83,0x06,0xb9,0xa9,0xaf,0x22,0x30,0x8c,0xfd,0xc0,0x94,0x01,0x97,0x5f,0x55,0xff,0x8d,0xc4,0x64,0x64,0x10,0x08,0xe9,0xfa,0x0f,0x34,0x8f,0xa9,0x28,0x8d,0xb4,0x61,0x19,0x99,0x7d,0x50,0xbf,0xc0,0x26,0xbe,0x83,0x7d,0xdc,0x4b,0xdf,0x03,0x27,0x84,0x9f,0x16,0x47,0x72,0xee,0x1b,0x62,0x0e,0x1c,0x1b,0x80,0xaf,0x6a,0xe9,0xc0,0x77,0x30,0x80,0x8a,0x74,0xfc,0x94,0x4e,0x55,0x5b,0xdf,0xa1,0xad,0xef,0xa4,0xeb,0x4f,0x9c,0xf8,0xf6,0x3b,0x35,0x15,0xb6,0x38,0x94,0xf1,0x22,0xc0,0xd4,0x15,0xfb,0xa1,0xdc,0xaf,0x10,0x9f,0x3c,0x05,0x48,0x80,0x02,0x44,0xad,0xf0,0x2d,0x67,0xef,0x2e,0xaa,0xc5,0x3d,0x84,0xb8,0x87,0xde,0x15,0xd4,0x55,0x25,0x6b,0xeb,0x9b,0x84,0x5d,0xa7,0xd2,0x33,0x6a,0xc2,0xa1,0xa1,0x4e,0x6e,0x93,0xf5,0x55,0xdd,0xc2,0x34,0x5e,0x15,0x69,0x8c,0x57,0x76,0x09,0x0d,0xfe,0x53,0x1a,0xf1,0x51,0xd1,0xcf,0x0c,0x50,0x32,0x50,0x66,0xa9,0x21,0x6f,0xa9,0xfb,0x7c,0x37,0xb6,0xae,0xa4,0x86,0x98,0x1d,0x5a,0x20,0x4c,0xae,0x83,0x85,0x11,0xc1,0xcc,0x8a,0xa4,0xc0,0x48,0x70,0xc8,0x2d,0x4c,0x64,0x41,0x31,0xf9,0x6a,0x43,0x54,0x1b,0xa2,0x95,0xa8,0xe7,0x4f,0xa7,0x18,0x3c,0x25,0xb9,0xce,0xc8,0x5d,0x99,0x18,0x1a,0x7e,0x9c,0xc1,0xa5,0x2b,0x27,0x71,0xe8,0x20,0x9a,0x13,0x9f,0x64,0xe8,0x17,0x58,0xbc,0x07,0xe2,0xc5,0xfb,0x33,0x20,0xc7,0x31,0x9c,0x56,0x89,0xc1,0x25,0x39,0xd8,0xeb,0x39,0x2c,0xca,0x5e,0xb8,0xca,0x27,0x92,0xaa,0x0d,0xb5,0x50,0xe9,0x35,0xdc,0x13,0xfa,0x7b,0x2e,0xd4,0x1c,0x43,0xde,0x6f,0xec,0xfb,0x08,0x81,0xbc,0x02,0x3b,0x92,0xf7,0xcc,0x47,0x84,0xe9,0x33,0x92,0x36,0xa3,0x22,0x53,0x76,0xcf,0xfe,0xb5,0x17,0xc1,0xdb,0xc2,0xe0,0x10,0x88,0xe9,0x0a,0x06,0x5b,0x0e,0xb0,0x92,0x22,0x0d,0x27,0x7d,0xa1,0x21,0x46,0x05,0x58,0x42,0xe8,0xd0,0xbc,0x15,0x69,0x94,0x5f,0x80,0x72,0x05,0x94,0x04,0xae,0x4c,0xa5,0x20,0x25,0xd1,0x47,0x77,0x51,0x63,0xb5,0x84,0xdc,0x68,0xba,0x98,0x3a,0x57,0xcc,0x84,0xa4,0x32,0x11,0xee,0x6c,0x82,0x9a,0x4e,0x7c,0x3f,0xd0,0x08,0x1d,0x20,0x40,0xc6,0x7f,0x2f,0x12,0x5d,0x76,0x01,0x58,0x6a,0xf3,0xd1,0xa0,0x1d,0x80,0x2c,0x1a,0x73,0xfa,0x7a,0xd7,0x40,0xf9,0xc3,0x0f,0xa4,0x67,0xd0,0x7b,0x9a,0xe0,0xa6,0x05,0x85,0x46,0x51,0x4f,0x5e,0x32,0xc3,0x7c,0xa3,0xee,0xd3,0x1a,0x12,0x76,0x99,0x33,0x76,0x92,0xd6,0x9e,0xfc,0xa1,0x5d,0xb5,0x21,0xef,0xd4,0x4f,0xa1,0x05,0x01,0xc8,0x26,0xd5,0x20,0x80,0xe9,0xc7,0x8b,0x48,0xd4,0xa5,0x47,0x5d,0x80,0x78,0x2c,0xa2,0xef,0xc6,0xbd,0x45,0x51,0xf5,0x4c,0x49,0x14,0x85,0x84,0x61,0x3b,0x0d,0x55,0xda,0x14,0xea,0x70,0x84,0x47,0x11,0xa3,0x5a,0x35,0x18,0x6e,0xaf,0xfd,0xa7,0xb5,0xb4,0xd2,0xb5,0x04,0x6c,0x02,0x73,0xff,0x52,0xbe,0x62,0x2f,0xd2,0x47,0x40,0x4b,0x10,0x9a,0x36,0xf3,0x10,0x9a,0x08,0xf3,0x10,0x9e,0xd9,0xf2,0x20,0x35,0x8b,0x14,0x60,0x3c,0x23,0xe4,0x61,0xca,0xad,0x55,0xc0,0xc6,0x19,0x6c,0xb3,0x7d,0xd7,0xe3,0xfd,0xf1,0xab,0xe1,0x6f,0x83,0xff,0x3b,0xbe,0x1c,0xde,0x89,0x9a,0x7f,0x30,0x3f,0xa8,0xda,0x83,0x93,0x20,0xad,0xf7,0x85,0x27,0xaf,0xc5,0x7b,0x39,0x1e,0xfa,0x93,0x8f,0x32,0xae,0x6f,0x5d,0x47,0xfb,0xed,0xf6,0xd6,0x13,0x18,0x1d,0x8f,0xfe,0xed,0x99,0x1f,0xc5,0xb4,0x68,0x7b,0xb2,0xb5,0xff,0xbc,0xd3,0xe9,0xb6,0xb7,0x9a,0xe2,0x9f,0x5b,0x56,0x68,0x2f,0x1c,0xcf,0xdf,0xfa,0x57,0xe3,0xe5,0x66,0x46,0x6c,0x1b,0x0b,0x28,0xd8,0x22,0x68,0x4e,0x17,0x9e,0x22,0x5f,0x6f,0xf0,0xc2,0x85,0xa2,0x22,0xb8,0x87,0x6d,0xd7,0xbf,0xaa,0x6f,0x61,0x5d,0x4b,0x15,0xfe,0xd0,0x40,0x81,0xfe,0x14,0x5b,0xe2,0x09,0x0b,0x72,0x84,0x05,0x53,0xbd,0xd1,0x78,0x29,0x04,0x56,0x0c,0x39,0xca,0x73,0x19,0x45,0x30,0xc7,0x1c,0x71,0xb9,0x84,0xd5,0x35,0x44,0x99,0xc5,0x50,0x86,0x4b,0x4c,0x55,0xf5,0x50,0x4e,0x10,0xef,0x45,0x8d,0x7d,0x01,0xb1,0x19,0x7b,0xdb,0xb6,0x62,0x8b,0xe8,0xaf,0x79,0x80,0x75,0x9e,0xb7,0x0c,0x43,0x58,0x71,0x8e,0x33,0x41,0xaa,0x38,0xa7,0x9a,0x14,0xc7,0x84,0xf2,0xe0,0xc1,0x03,0xe2,0xcc,0xd8,0xb4,0x08,0xfa,0xca,0xde,0xfa,0x8a,0x7e,0xdd,0x4c,0x85,0x4b,0x26,0x4e,0x5a,0xfc,0x9a,0xc6,0xd6,0x25,0x01,0x0a,0x68,0x98,0x1b,0x13,0xb4,0xc4,0xfe,0x0a,0x68,0x69,0x24,0x0a,0x3c,0x63,0xb0,0x30,0x56,0x8a,0xa4,0x42,0x4d,0x60,0x18,0x83,0x27,0x8f,0xa1,0x82,0x49,0xa2,0x91,0x0d,0xa6,0x3c,0x86,0x11,0x2d,0x02,0xcd,0x1c,0x61,0x79,0xbc,0x24,0x5c,0x03,0x52,0x6e,0xcc,0x15,0xb0,0x74,0x30,0x46,0x58,0xe6,0x28,0xcc,0x63,0xf1,0x82,0x7a,0x07,0x8b,0x06,0x51,0xe7,0x79,0xa1,0x21,0xa8,0x43,0x05,0x64,0xc1,0x8a,0xc0,0x53,0x73,0x85,0xf8,0x2c,0x78,0xa9,0x9b,0xd5,0x42,0x87,0xc3,0xba,0x62,0x47,0xd5,0x69,0xfa,0x8b,0x78,0x6e,0xdd,0xf0,0x97,0xe3,0x35,0x1d,0x8f,0x2e,0xf0,0xe9,0x78,0xa0,0x26,0x98,0xdc,0xcd,0x99,0x75,0x03,0xf3,0x51,0x88,0xb4,0x56,0x27,0x90,0x43,0x03,0x45,0x55,0xc2,0x88,0x27,0xd8,0xad,0x42,0x63,0x0a,0x0a,0xeb,0x56,0x61,0x31,0x35,0x8d,0x14,0xc8,0x90,0x26,0x5d,0x40,0x15,0x7b,0x8c,0x1e,0xc2,0x6a,0x88,0xb6,0xa8,0x33,0x01,0x7d,0xad,0x08,0xe4,0x1a,0xd2,0x4f,0x2b,0x3f,0x16,0x75,0x96,0xa9,0xc5,0x72,0x34,0x30,0xf8,0xe8,0x9b,0x5b,0x49,0xfe,0xe1,0x57,0xff,0x76,0x48,0x8b,0x7a,0x62,0x92,0xb4,0xba,0x4e,0xfe,0x19,0xeb,0x26,0x19,0x36,0xb3,0x05,0x51,0x44,0x0a,0xc3,0xa6,0x4a,0x72,0x49,0x2c,0xb2,0x8b,0xcf,0x9f,0xc5,0x5f,0x5f,0xb0,0xb9,0x40,0x24,0x79,0xd7,0x88,0xe8,0x61,0x75,0x2f,0xa7,0x20,0x63,0x8b,0x7e,0xdf,0xc4,0xde,0x56,0x18,0x3f,0x8b,0xad,0x64,0x4b,0x61,0x4b,0xec,0x97,0xca,0x1b,0x4d,0xcc,0x02,0xbc,0x93,0xb1,0x96,0x96,0xc2,0xf8,0x59,0x74,0xf2,0x24,0x18,0xcc,0x24,0xd4,0xf6,0xc7,0x5a,0x1a,0x1a,0xa5,0x44,0x44,0xc1,0x99,0x0a,0xad,0x36,0x43,0xac,0x42,0x5f,0x3b,0xae,0x3b,0xa0,0x05,0xf4,0x5a,0x82,0x65,0x6c,0x34,0x96,0x77,0x98,0x3a,0x9d,0x42,0x5b,0x4b,0xa8,0x39,0x76,0xa7,0xa0,0xfe,0xfe,0x4e,0x1d,0x94,0xb1,0x7f,0x16,0x3b,0xd5,0x6c,0x52,0x94,0x1c,0x9b,0x21,0xa6,0xe3,0x8f,0xf2,0xfe,0xed,0x32,0xf1,0xa9,0x65,0xbb,0xbb,0x9d,0x6e,0xe7,0xa7,0x15,0x2d,0x33,0x90,0x99,0x29,0x26,0xe7,0xaf,0x68,0x5b,0x19,0xbb,0xd4,0xb6,0x12,0x4a,0x8e,0xcd,0x7d,0xdb,0x56,0x85,0x4f,0x6d,0xc3,0x54,0x28,0x3b,0x4f,0x0b,0x6d,0xab,0x40,0x66,0xa6,0xd8,0xed,0xf4,0xdf,0xf0,0x40,0xbc,0xf4,0x07,0x1c,0x30,0xaf,0xe5,0x59,0x81,0xfe,0xb3,0x88,0x43,0x0c,0xe0,0x1c,0xb7,0x32,0x1a,0xc6,0x3c,0x02,0x9f,0x76,0x5b,0x0c,0x42,0x89,0x79,0x54,0x0c,0x2c,0x0f,0xd1,0x0e,0x2d,0x08,0xe6,0x34,0xe8,0x69,0xa1,0x86,0xed,0x4f,0xe1,0x60,0x55,0x88,0xa8,0x7e,0x06,0x84,0x64,0x48,0x0b,0x7f,0xfc,0x27,0x66,0x3b,0x35,0x54,0xf1,0x3b,0x2b,0xe8,0x23,0xaa,0x9d,0x2c,0xa8,0xfe,0x36,0xc2,0xe8,0x63,0x45,0xea,0xd5,0xed,0x89,0x9d,0xf9,0x03,0x62,0xcb,0x51,0x85,0x62,0x67,0xd4,0x98,0xb0,0x1c,0xba,0x52,0x7d,0x4b,0x21,0x6c,0x11,0xbe,0xfa,0xb9,0x8d,0xe5,0x63,0x5f,0xb9,0x06,0xc0,0x9c,0x69,0x5d,0x8f,0xec,0xbe,0xe8,0x34,0xd4,0xee,0x26,0xb9,0x48,0x43,0x9c,0x6d,0xac,0xeb,0x40,0x8a,0xfb,0x53,0xd5,0x48,0x06,0x32,0x57,0x49,0x47,0x75,0x45,0x9d,0x7f,0x70,0x59,0xc6,0x3a,0x21,0xcf,0xdf,0x19,0x38,0x25,0xa1,0x7e,0xa0,0x20,0x47,0xcb,0x0a,0x10,0xe0,0xd8,0x83,0x99,0xe3,0x42,0x01,0x5c,0x23,0x6d,0x3d,0x6d,0x65,0xdf,0xc4,0x7d,0x4d,0x07,0xca,0xe2,0xfd,0xfb,0x1b,0xb4,0x7b,0xc7,0xe6,0x36,0x2b,0xbc,0x00,0x33,0x5b,0x44,0x9d,0x8e,0x59,0x45,0xa0,0xaf,0x5e,0x61,0xdd,0x04,0x3f,0xdc,0xed,0x8f,0x64,0x84,0xef,0x4e,0xff,0xdc,0x67,0xcf,0xcd,0x34,0xb1,0x5f,0xb1,0x98,0x4f,0x25,0x82,0xeb,0x09,0x39,0xcf,0x1d,0x38,0xee,0x33,0x2b,0x9e,0x6d,0x5f,0x9c,0x28,0xf7,0x4e,0x48,0xc9,0x88,0x7a,0x63,0xd9,0x0e,0x82,0x6c,0x58,0x96,0xd9,0xc2,0x56,0x3d,0x77,0xd9,0xee,0x3e,0x6d,0x3c,0xe9,0x76,0x1a,0x0d,0xfc,0xd0,0x82,0x63,0xb2,0x39,0xf3,0x97,0x32,0x71,0xf8,0x05,0x72,0x4f,0xc4,0x9e,0xc6,0x4b,0xac,0x3b,0xe5,0x53,0xc2,0xdc,0xc5,0x3c,0xa9,0x74,0xc1,0xe6,0xf8,0x01,0x38,0x39,0x65,0xb7,0xc5,0x4e,0x0e,0x61,0x94,0x21,0x68,0xb5,0x67,0x18,0xb6,0x83,0xd8,0x8d,0xe6,0x9d,0x7f,0x60,0x5d,0xf7,0x89,0xf4,0x8f,0x91,0x8c,0x95,0x3a,0x42,0x91,0x32,0xd9,0x6e,0xc2,0x78,0x55,0xad,0x73,0x79,0x45,0x76,0xb9,0x86,0xe6,0x63,0xd1,0x42,0x68,0x90,0x27,0xf2,0x8e,0x26,0x79,0xac,0xa3,0xcb,0x8c,0x53,0x71,0xcb,0x9c,0x73,0x95,0x0a,0x7c,0x4b,0x04,0x35,0x57,0x98,0xc1,0x5b,0xb2,0x09,0x1c,0x7a,0x50,0x88,0x95,0x6e,0x88,0xd1,0xce,0x20,0x47,0x1c,0xfe,0x14,0x01,0x14,0xed,0xc7,0xab,0x1e,0x43,0x77,0xd9,0x1f,0xfa,0x5a,0xcb,0x49,0x37,0x12,0x70,0xa4,0x81,0x23,0x00,0xb5,0x2b,0x98,0x49,0x74,0xab,0x33,0xe5,0xf1,0xae,0x0e,0x7e,0x44,0xb4,0x08,0x68,0x03,0x95,0x41,0xb1,0xbf,0x98,0xcc,0x04,0xbc,0x9a,0xe7,0x63,0xf8,0x63,0x40,0xd5,0xa0,0x17,0x82,0x61,0xcd,0x46,0x47,0x47,0xf0,0x14,0xe9,0x70,0x4e,0x7e,0xe8,0x01,0xdd,0xd8,0xdc,0xc0,0xe4,0x9f,0x0c,0x1c,0x78,0x96,0x63,0x0a,0xb0,0x4f,0xb1,0xd1,0x21,0x31,0x54,0xea,0x5b,0x19,0x19,0x84,0xc0,0x3e,0xbc,0x14,0x2e,0x87,0x74,0xd9,0xc4,0x5e,0xb4,0x1b,0x49,0x1a,0x13,0x77,0xd4,0xa6,0x46,0x65,0x95,0xc9,0x4c,0xef,0x5f,0x17,0xe3,0x34,0xab,0x7a,0xec,0xd9,0x46,0x4d,0x1c,0x46,0x48,0xfc,0xbc,0x43,0xfe,0xb9,0xbf,0x40,0xa7,0x60,0x4d,0xcf,0x64,0xce,0xe8,0xea,0x08,0x57,0xf7,0x92,0x80,0xeb,0xa6,0xd2,0x73,0xdd,0x7b,0x4b,0xcf,0x75,0x17,0x41,0x56,0xf3,0x6d,0x90,0x97,0x1d,0xdd,0x7a,0x14,0x5a,0xd7,0xdc,0x7f,0x89,0xe3,0xb6,0x01,0x38,0xd6,0x23,0x14,0xfb,0x5d,0x0a,0x70,0xa2,0x47,0x68,0x5d,0x9b,0x4a,0x33,0x19,0x78,0x84,0xd0,0x7e,0xfc,0x4d,0x8f,0xcd,0x0d,0x58,0xed,0x05,0x6f,0xa5,0x63,0xe9,0x2e,0x71,0x8e,0x67,0x63,0xaf,0x45,0x7c,0x13,0xad,0x36,0x4b,0xc1,0x14,0xff,0x97,0x8e,0x0f,0xb3,0x66,0x25,0xce,0x86,0x5d,0x20,0xc2,0x42,0xea,0x09,0x81,0xc9,0x25,0x94,0x89,0x37,0x4c,0xc6,0x06,0xd5,0x06,0x9d,0x34,0x38,0xcf,0x2b,0x42,0x77,0xb1,0xf2,0xc4,0xdb,0x63,0x89,0x43,0xae,0x0b,0x38,0x50,0xd6,0x50,0x0a,0xb6,0xc2,0x49,0x49,0x43,0x58,0xb4,0xe5,0xfc,0x5d,0x53,0x74,0x50,0x66,0xfa,0xe3,0x5c,0x5f,0x6a,0x4a,0x74,0x22,0x98,0x44,0x2f,0xa5,0x00,0xc4,0x44,0x8c,0x38,0x44,0x18,0xd2,0xb9,0x97,0x81,0x6a,0x04,0x0e,0x65,0x64,0x96,0x99,0x7a,0xbf,0x5a,0x63,0x89,0x37,0x56,0x8e,0x22,0x99,0xe1,0x4b,0x9e,0x84,0x80,0x50,0x66,0x28,0x66,0xe4,0x68,0xd8,0x69,0x20,0x20,0xa8,0x52,0x62,0x6a,0x3c,0xeb,0x95,0x08,0x97,0xa1,0xfc,0x11,0x36,0x66,0x4d,0x85,0x35,0x12,0x37,0x65,0xce,0x2f,0xba,0x82,0xae,0xf1,0xa4,0x50,0xe3,0xc0,0x74,0xeb,0x69,0xfd,0xfc,0x6c,0x66,0x52,0xcb,0xf1,0x1f,0x55,0xf3,0x1f,0xad,0xe6,0x3f,0x5a,0xc5,0x5f,0x47,0xf8,0xa9,0x4b,0x35,0xa1,0x15,0x12,0x98,0x66,0xa4,0x64,0x6e,0xea,0xaa,0x74,0xb8,0x7e,0x7f,0x23,0xc2,0xb0,0x56,0x01,0x13,0x4e,0x9d,0x6c,0x9c,0xc8,0x0b,0x1c,0x64,0xd9,0x14,0xba,0xa0,0x8c,0x3c,0xfc,0x55,0x48,0x51,0x43,0xc2,0x4d,0xa1,0x12,0x5d,0xcb,0xfd,0x45,0x23,0x56,0x58,0xf1,0x5e,0xf2,0xdb,0x04,0x3e,0xed,0x74,0x12,0x8e,0xa7,0x3c,0x91,0xf1,0xe9,0x1f,0xeb,0x86,0xf6,0x4c,0xb2,0x95,0x77,0xbf,0x4b,0x0b,0xe8,0xef,0xb3,0xd0,0x79,0x36,0x99,0x4e,0xee,0xb1,0xd0,0x21,0xb9,0xbe,0x20,0x66,0xc5,0xae,0xf9,0x77,0x63,0x7d,0xcf,0x35,0x16,0xb3,0xc6,0x1b,0x8a,0x26,0xb7,0xcc,0x40,0x3a,0x13,0xab,0xa3,0xd7,0xaa,0xb1,0xc9,0x13,0x5b,0xe1,0xc7,0x54,0x7f,0xa5,0x9a,0xdd,0xac,0xa6,0xb9,0x2a,0x30,0xcd,0x06,0x07,0x88,0x28,0x53,0x8e,0x00,0xf5,0x8b,0x45,0x79,0x57,0x65,0x3a,0x98,0xd2,0xea,0x6d,0xb5,0x83,0xa9,0x90,0x61,0xb5,0x83,0x29,0xba,0x18,0x9e,0x9e,0x70,0xd0,0x09,0x65,0xe2,0x70,0x87,0xf6,0xe0,0x78,0x7e,0x2d,0xfa,0x0c,0x73,0x86,0x4f,0x77,0xe6,0xd8,0x73,0xe8,0x90,0x97,0xf6,0x5e,0x88,0x7e,0xb1,0x06,0x8d,0x26,0x5d,0x41,0xe1,0x43,0xab,0x17,0x21,0x03,0xd8,0x5d,0x8d,0x91,0x79,0x41,0x1e,0x6b,0x1a,0xfa,0x73,0x04,0x23,0xb4,0xcb,0x8f,0x13,0x1b,0x04,0x33,0x53,0x6b,0xe1,0x12,0x0a,0x41,0xea,0xd8,0xd5,0xc5,0xf9,0x54,0x53,0x7c,0xf2,0xfd,0x39,0xe8,0x6c,0xa8,0xdd,0x3e,0xb0,0xa6,0xef,0x23,0x85,0x9b,0x7a,0xac,0x44,0xa2,0x7e,0x57,0x3c,0x7a,0xa4,0x37,0x06,0x21,0x37,0x82,0x76,0x96,0x48,0x46,0xff,0xec,0xfc,0x4b,0x03,0x68,0x69,0xa1,0x23,0x7d,0xd4,0x65,0x93,0xd4,0x8e,0x69,0x45,0xb5,0x00,0x1a,0xa2,0xa0,0x4c,0xe3,0x8d,0xd6,0xe1,0x71,0x9c,0x46,0xed,0x3d,0x53,0x8a,0x4d,0xcf,0x74,0x34,0x8f,0x56,0xe2,0x7c,0x54,0xc1,0x29,0x27,0x7e,0xa4,0x94,0x0b,0xa5,0x97,0x7e,0x90,0x90,0x3b,0xc2,0x9a,0x0f,0x7e,0x44,0x15,0x13,0x2c,0xf5,0x1a,0x74,0x8a,0xf2,0x06,0x11,0x03,0xd9,0x34,0x39,0x23,0xc3,0xb9,0xa6,0x57,0xda,0xff,0x25,0xc4,0xde,0x48,0x9a,0x0e,0xd2,0x48,0x63,0xa3,0x1c,0x6b,0x28,0x50,0x36,0x61,0x30,0x88,0x5c,0x16,0x6d,0x67,0x61,0x33,0x69,0x67,0xfb,0x17,0x49,0xf1,0xee,0x07,0x5d,0x44,0xe0,0x74,0xeb,0xad,0x7e,0xa3,0x80,0xe4,0x7b,0x6e,0xfa,0xfd,0xdd,0x67,0x7b,0xca,0xe7,0xd0,0x26,0x19,0xaf,0x92,0xe8,0x22,0xe7,0x11,0x08,0xf1,0xc0,0xc4,0x6b,0xb7,0x09,0x33,0xdd,0x96,0xbb,0x69,0xee,0x76,0x3b,0xcd,0x6e,0xf3,0xe9,0x5e,0xa7,0x89,0x3d,0x08,0x45,0x5e,0x93,0xcb,0x21,0xbd,0x00,0xd2,0x4f,0x2f,0xf6,0x9a,0xbb,0xcf,0x7e,0x52,0x48,0x5f,0x0a,0x5c,0x7a,0x6b,0xb9,0xb4,0xba,0xcd,0x16,0x71,0x42,0xba,0x4d,0xb3,0xbb,0xa7,0x5c,0x6a,0x05,0x1f,0x85,0xf6,0x02,0x5c,0xf6,0x9a,0x7b,0x4f,0x35,0xa3,0xfc,0x07,0x25,0x81,0x9c,0xf0,0xc1,0x26,0x69,0x69,0x5b,0x1d,0x67,0x96,0x34,0x44,0x1a,0xbd,0xcd,0x6b,0x74,0xa4,0x35,0x4a,0xe0,0x0c,0xff,0x36,0xd3,0xe8,0x2d,0x34,0xfa,0xa2,0x93,0xb6,0x81,0xf0,0x90,0x32,0x52,0xd5,0xd8,0xdb,0x9e,0x89,0x78,0xef,0xc6,0x12,0xc5,0x14,0xed,0xb6,0x09,0x95,0x77,0x9f,0xa3,0xad,0x2f,0x3a,0x59,0x5b,0x0b,0x7c,0x0e,0xd6,0xf2,0xa9,0xee,0xba,0x02,0x97,0xa7,0x84,0xf4,0xa2,0xdb,0x7c,0xb6,0xf3,0x13,0x58,0x69,0xb4,0x82,0x4e,0xdb,0xed,0x42,0xa5,0xdd,0xe7,0xd0,0x7f,0x27,0x5f,0xa7,0x8c,0x04,0xc1,0x77,0x3b,0xcc,0x3f,0x6d,0x25,0xf7,0x8e,0xee,0x9c,0x51,0xa9,0x73,0x94,0xb2,0xc1,0xf2,0x0b,0xdc,0x5d,0xd1,0xb7,0x61,0xdd,0x51,0xed,0x0b,0xb9,0x0b,0x30,0xb8,0x4e,0xa6,0x88,0x69,0x91,0xef,0x17,0x62,0x2e,0xe3,0x99,0x37,0x0b,0xd5,0xb0,0x53,0x1e,0xd2,0x79,0xa5,0x3a,0xb8,0x54,0x8e,0xab,0x62,0xd3,0xa7,0xe0,0x95,0xb2,0x55,0x61,0xea,0x80,0x8c,0x35,0x21,0x69,0xa6,0xc2,0x3f,0x7c,0xab,0x7b,0xa8,0xf0,0x0e,0x65,0xe7,0x50,0xf6,0x0d,0x6d,0xa4,0x0a,0x31,0xa9,0x85,0x37,0x76,0xa0,0x21,0x63,0xb1,0xa7,0x36,0x4a,0x4a,0x61,0x6e,0x79,0x0e,0xe2,0x55,0x52,0x79,0x0e,0x4a,0x97,0x69,0xab,0xa7,0x20,0x4a,0x5c,0x2c,0x4e,0x44,0xe9,0x0a,0x2d,0x5f,0x2d,0x37,0x55,0x54,0xfb,0xff,0x15,0xee,0xfe,0x87,0x77,0xff,0xe1,0xdd,0xff,0x7e,0xde,0x9d,0x5c,0x3b,0xa9,0xfd,0xbf,0xd1,0xbb,0x7f,0xbb,0xe3,0xae,0xf6,0x06,0x6f,0x83,0x1f,0x9e,0xfb,0x6e,0xcf,0x9d,0x6d,0x74,0x71,0x79,0xa2,0xcc,0xff,0xd7,0xe6,0xd2,0x62,0x8c,0xec,0xad,0xef,0xbe,0xb7,0x74,0x89,0xa5,0x84,0xda,0x30,0xc6,0x6e,0x6a,0xa2,0x3f,0x2a,0xd5,0x67,0xa4,0xe7,0x8b,0x39,0xf2,0xce,0xa9,0x30,0x70,0x6e,0x90,0x63,0xab,0x70,0xf5,0x0c,0x83,0x45,0x46,0x44,0x83,0x32,0x59,0x7b,0x19,0x09,0x0e,0xda,0x3c,0x34,0x15,0x53,0xef,0xb4,0xdc,0x51,0x47,0x32,0x25,0x41,0xf4,0x06,0xf2,0xfd,0x24,0x51,0xc8,0x05,0x49,0xd4,0x79,0xc6,0x3d,0x44,0x49,0x0f,0x32,0x56,0xc9,0xf2,0x21,0xb7,0xcf,0xac,0x77,0x8d,0x28,0x93,0x2c,0x94,0x94,0x01,0x86,0x6d,0x22,0xec,0x4b,0x33,0x58,0x1d,0xf0,0xc4,0x33,0x8b,0x76,0x0c,0xf8,0x48,0x24,0xa2,0xd3,0x24,0x3a,0x58,0x02,0x0a,0x2f,0xca,0x90,0x03,0xeb,0x45,0x20,0x55,0xd9,0x22,0xae,0x09,0xb3,0xc1,0x1e,0x38,0xed,0x72,0x24,0xe4,0x0b,0x5b,0x79,0x49,0x0b,0xc9,0x59,0x16,0x72,0x49,0xcc,0xe6,0xa9,0x51,0xb3,0xa6,0x5d,0xa3,0xff,0xde,0x76,0xd1,0xc9,0x47,0xa9,0x5d,0xd9,0xc6,0xd8,0x83,0x3e,0x32,0x88,0xd5,0xcf,0xcf,0x9f,0x95,0x2b,0xc8,0x40,0xa3,0xc6,0xa3,0x47,0x66,0x54,0xa2,0x9c,0x2d,0x9f,0x41,0x20,0xb5,0xa5,0x2f,0xb0,0xc6,0xc7,0x82,0xb8,0x5e,0x35,0xe9,0xe0,0xa0,0xbf,0x26,0x6a,0x4f,0x72,0x28,0x79,0xf7,0xd8,0x60,0x04,0x5d,0x9e,0xa5,0x7b,0xe4,0xc0,0x59,0x8e,0x47,0x1e,0x3b,0x4d,0xec,0xc8,0x81,0x8d,0xed,0xa4,0x1c,0xdc,0xcc,0xdd,0xc8,0x17,0x18,0xe9,0x1a,0xca,0x8d,0x1b,0xb9,0x38,0xc8,0x71,0xb4,0xeb,0x2a,0x85,0x47,0x97,0xa4,0xa9,0x37,0x19,0x34,0x9f,0xd3,0x05,0x40,0x3e,0xa5,0x8b,0x30,0x72,0x19,0x5d,0x00,0x14,0xb3,0xb7,0x08,0x54,0x48,0xde,0x52,0x2e,0x78,0xc5,0x0e,0x19,0x65,0x0d,0xd1,0x07,0x3d,0x54,0xc7,0xa1,0x87,0x11,0x12,0xa0,0x9a,0x09,0xa5,0x7e,0xc7,0x44,0xb5,0x6d,0xc0,0xbf,0xd1,0x81,0xeb,0xda,0x25,0x9f,0x6d,0xc0,0x53,0xcf,0xad,0x37,0x25,0xb5,0xf5,0x50,0x4b,0x80,0x51,0x19,0x94,0x70,0x33,0x93,0xc2,0xc2,0xc4,0xa9,0x03,0x0b,0x7d,0xea,0xf8,0x37,0xb5,0x35,0xd5,0x21,0x65,0x9b,0xe2,0x54,0x9a,0x5c,0xce,0x5f,0x82,0x5b,0x6d,0x99,0x89,0xa9,0x18,0xa6,0x98,0x5a,0xca,0xdf,0x5a,0x7d,0x2b,0xb4,0xb7,0x52,0x51,0xa2,0x90,0x81,0x99,0xa9,0x2e,0x97,0xbb,0x96,0x0d,0xb3,0x44,0x7b,0x18,0x49,0xb5,0xc3,0xda,0x13,0xa8,0x42,0x25,0xbf,0x2b,0xa5,0xdc,0xd5,0x2f,0x6b,0xfa,0xb7,0x98,0x98,0x59,0x90,0x24,0x49,0x8f,0xab,0x96,0xe4,0xd5,0x77,0x97,0xc4,0x48,0x07,0xcd,0x24,0x31,0x1c,0xd9,0x0f,0x73,0x5a,0x3b,0xee,0x32,0x07,0xff,0x43,0x51,0xd5,0xe6,0x57,0x9c,0x14,0x31,0x12,0x0b,0xb3,0x22,0x29,0x93,0x94,0x96,0x06,0x23,0xfd,0x34,0xe6,0xca,0xc1,0x71,0xc6,0xc6,0x5f,0x04,0x37,0x83,0x33,0x02,0x54,0x05,0x67,0xe7,0xb8,0x73,0xc0,0x72,0x9d,0x4f,0x9f,0xb0,0x72,0x52,0x99,0x89,0x88,0xcf,0x3e,0x70,0x1d,0x23,0xd3,0xc1,0x08,0xb3,0x68,0x26,0xbb,0x4a,0x4e,0x00,0x5a,0xdd,0x4e,0x87,0xc2,0x32,0xa4,0xb1,0x74,0x0a,0x91,0xd5,0xba,0x70,0xb1,0x0e,0xf4,0xc7,0x49,0x80,0x45,0xf7,0x13,0xa8,0xd5,0x56,0xa3,0x9d,0x3b,0xcf,0x6b,0x6c,0xc7,0xfe,0x6b,0x04,0xdd,0xb6,0x3a,0x0c,0x41,0xce,0xe5,0x7d,0x64,0x1f,0x7d,0x07,0xd9,0x2b,0x43,0xc2,0x44,0x76,0x53,0xf8,0x51,0x2a,0xfc,0xa8,0x28,0xfc,0xe3,0x56,0xb7,0xd4,0x80,0x92,0xf6,0xc1,0x4b,0x25,0x83,0x24,0x59,0x29,0x85,0xe8,0x18,0x91,0xb0,0x85,0x76,0xa8,0x5b,0xda,0xcc,0xc0,0x96,0x22,0x64,0x0a,0x96,0x43,0xdc,0x41,0x8b,0xd3,0xc9,0x00,0x27,0x31,0x88,0x8c,0xaf,0x67,0x38,0xc9,0xa4,0x43,0x18,0x84,0xcc,0x11,0x12,0x49,0xe8,0x1c,0x52,0xda,0x39,0x15,0x28,0xab,0x55,0x8b,0x1d,0xb3,0xb2,0x38,0x6f,0x8a,0xf3,0xe3,0xa6,0xc0,0x6b,0x48,0x6f,0xbc,0xde,0x37,0x05,0x5e,0xe7,0xef,0x39,0xf6,0x1e,0x10,0x71,0x8f,0xf3,0xd5,0x22,0x32,0xd7,0x09,0x9d,0x55,0xeb,0x73,0x6d,0x56,0x40,0x41,0x85,0x47,0x8e,0x99,0xa4,0x9d,0xe8,0x50,0xe7,0xeb,0xd3,0x51,0x11,0x1c,0x75,0x2d,0x31,0xde,0x34,0x05,0x08,0xd0,0xa2,0x51,0x24,0x38,0xbc,0xb7,0x40,0x37,0xd2,0x68,0x14,0x43,0xf5,0x7a,0xb1,0x8b,0x98,0x3d,0x41,0x3a,0xe8,0xaf,0xce,0x01,0xc2,0x21,0x53,0x82,0xd6,0x5b,0x81,0x06,0x07,0x93,0x6e,0x08,0x64,0xe2,0x0e,0x58,0x5e,0xe5,0xd5,0x52,0x4e,0xb8,0xc7,0x75,0x05,0xa3,0x0a,0x0a,0xe7,0x55,0x14,0x0e,0xbe,0x46,0x86,0x61,0x4a,0x41,0x11,0x49,0x35,0x97,0xc9,0x51,0x4e,0xb7,0x4a,0xe9,0xa0,0x82,0x22,0xd5,0xc7,0x1d,0x72,0x35,0x02,0x6f,0x20,0x2b,0x1a,0x9f,0x06,0x87,0xf7,0xcc,0x41,0x6d,0xec,0xa8,0xc4,0x1c,0x5d,0x39,0xc1,0x79,0x92,0x47,0xd2,0xad,0x49,0x99,0x66,0xcd,0x29,0x67,0x76,0x7d,0x95,0x20,0xc7,0xf7,0x11,0xc4,0x40,0xd2,0x4a,0xd1,0x76,0xae,0x70,0xd4,0xb0,0xfb,0x82,0xe1,0x87,0x6c,0xff,0x24,0x15,0x33,0xcd,0xa8,0x56,0xbb,0x2d,0x74,0x20,0xab,0xd6,0x9e,0x47,0x27,0xef,0x38,0xe3,0x99,0xee,0x55,0xde,0xe2,0xe4,0x6b,0xbe,0x21,0x98,0x8e,0xa9,0x21,0xd0,0x5f,0xa2,0xc6,0xd9,0x91,0xb5,0x7d,0x41,0x37,0x0a,0xab,0x3b,0xad,0x6b,0x4d,0x41,0x37,0xd0,0x17,0x76,0x93,0x80,0xc2,0xa9,0x04,0x02,0xcc,0x75,0x0e,0xf7,0x8e,0xbe,0xbb,0x23,0x61,0x5e,0x4f,0x19,0x35,0x33,0x2e,0x24,0x67,0xc2,0x36,0x9b,0x0c,0xd7,0xe4,0x7d,0x16,0xef,0x8d,0x06,0x81,0xb4,0x7e,0x32,0x53,0xde,0xbb,0xfa,0x28,0xa9,0x9e,0x46,0x4f,0xeb,0xaa,0x26,0x37,0x32,0xea,0x3a,0x7c,0xdb,0xf3,0x5a,0x51,0xf9,0x7e,0x6c,0x13,0x7b,0xad,0x64,0x7c,0x47,0x35,0xe9,0x63,0x13,0xf3,0x31,0xaf,0x9e,0x20,0x55,0x96,0x00,0xdf,0xf8,0x4b,0x31,0x44,0xe6,0x00,0xf2,0xb4,0x2e,0x29,0xd9,0x33,0xdb,0x4c,0xcc,0xef,0x83,0xe3,0x06,0x93,0x2f,0xc8,0xbd,0xa0,0x6d,0xc8,0x75,0xa4,0x46,0x77,0x91,0xc2,0x06,0xb0,0x41,0x4a,0xdd,0x42,0xcf,0x77,0x2f,0xd1,0x2d,0x4e,0x9b,0xbd,0x36,0xdd,0x3d,0x8f,0x9b,0x08,0xf9,0x6f,0x24,0xfe,0x03,0x01,0xf2,0x44,0x8c,0x5d,0x42,0x00,0x00}; 

//Creates web server on port 80 and creates a web socket server
ESP32WebServer server (80); 
WebSocketsServer webSocket = WebSocketsServer(8001);




//Time managing variables
float runTime, prevT = 0, timeDif, stateT;
int sp = 0, limit, timeInterval = 12000;
byte machineState = 0;

typedef struct struct_message {
    float a;
    float b;
    char conf[8];
    bool news;
} struct_message;

struct_message dagorData;
String comando_da_utente;
//Five Bar Parrallel Robot constants
const int l0 = 140;
const int l1 = 170;
const int l2 = 245;
const int l3 = 245;
const int l4 = 170;

//Angles calculated from the inverse kinematic model
float angleA, angleB,precA,precB;


//Circle DEMO angular positions for each motor [rad]
float circleA[] = {-0.3941,-0.4402,-0.4856,-0.5301,-0.5737,-0.616,-0.6569,-0.6963,-0.7337,-0.769,-0.8017,-0.8316,-0.858,-0.8804,-0.8983,-0.911,-0.9177,-0.9177,-0.9105,-0.8953,-0.872,-0.8403,-0.8006,-0.7534,-0.6998,-0.6408,-0.5777,-0.5117,-0.4442,-0.3761,-0.3083,-0.2416,-0.1764,-0.1133,-0.0524,0.0061,0.0621,0.1156,0.1665,0.215,0.2612,0.305,0.3467,0.3863,0.4239,0.4596,0.4935,0.5256,0.5562,0.5851,0.6126,0.6385,0.663,0.6861,0.7078,0.7281,0.747,0.7644,0.7803,0.7947,0.8074,0.8185,0.8276,0.8347,0.8397,0.8424,0.8426,0.8401,0.8347,0.8262,0.8147,0.7999,0.7819,0.7607,0.7364,0.7091,0.6791,0.6465,0.6116,0.5746,0.5358,0.4953,0.4534,0.4102,0.366,0.3208,0.2748,0.2282,0.1811,0.1335,0.0856,0.0374,-0.011,-0.0594,-0.1079,-0.1562,-0.2045,-0.2524,-0.3001,-0.3474,-0.3941};
float circleB[] = {-1.1362,-1.1087,-1.0798,-1.0492,-1.0171,-0.9832,-0.9475,-0.9099,-0.8703,-0.8286,-0.7848,-0.7386,-0.6901,-0.6392,-0.5857,-0.5297,-0.4712,-0.4103,-0.3472,-0.282,-0.2153,-0.1475,-0.0794,-0.0119,0.0541,0.1172,0.1762,0.2298,0.277,0.3167,0.3484,0.3717,0.3869,0.3941,0.3941,0.3874,0.3747,0.3568,0.3344,0.308,0.2781,0.2454,0.2101,0.1727,0.1333,0.0924,0.0501,0.0066,-0.038,-0.0834,-0.1295,-0.1762,-0.2235,-0.2712,-0.3191,-0.3674,-0.4157,-0.4642,-0.5126,-0.561,-0.6092,-0.6571,-0.7047,-0.7518,-0.7984,-0.8444,-0.8896,-0.9338,-0.977,-1.0189,-1.0594,-1.0982,-1.1352,-1.1701,-1.2027,-1.2327,-1.26,-1.2843,-1.3055,-1.3235,-1.3383,-1.3498,-1.3583,-1.3637,-1.3662,-1.366,-1.3633,-1.3583,-1.3512,-1.3421,-1.331,-1.3183,-1.3039,-1.288,-1.2706,-1.2517,-1.2314,-1.2097,-1.1866,-1.1621,-1.1362};

//Four-points DEMO - Here is the best place to program your own sequences
float coinsA[] = {-1.5, 1, 1.6, 0.5};
float coinsB[] = {-1.1, 2, 0, -1};

//Array with fixed size for saved positions
static float posA[50];
static float posB[50];

//Target variable, works if virtual joystick is disabled
float target = 0;
int savedIndex = 0;
// loop stats variables
unsigned long t = 0;
long timestamp = micros();




void handleData();
void inverseKinemstics();




void setup() {
  Serial.begin(115200);

  SPI.begin (MCP2515_SCK, MCP2515_MISO, MCP2515_MOSI) ;
  int count = 50;                                     // the max numbers of initializint the CAN-BUS, if initialize failed first!.  
      
      do {
          CAN.init();   //must initialize the Can interface here! 
          if(CAN_OK == CAN.begin(CAN_500KBPS))                   // init can bus : baudrate = 500k
          {
              Serial.println("CanBus inizializzato");
              break;
          }
          else
          {
              Serial.println("Errore inizializzazione canbus");
              delay(100);
              if (count <= 1)
                  Serial.println("riprovo a inizializzare il canbus");
          }
  
      }while(count--);
  
  //Wifi initialization
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid_wifi, password_wifi);
  Serial.print("Conectando a:\t");
  Serial.println(ssid_wifi); 
  
  // Waits for connection to be established
  while (WiFi.status() != WL_CONNECTED){
    delay(200);
    Serial.print('.');
  }
  

  delay(2000);
  
  //Print server IP to virtual COM
  Serial.println(WiFi.localIP());

  server.on("/", []() {                              
      server.sendHeader("content-encoding","gzip");                             
      server.send_P(200, "text/html", INDEX_HTML,sizeof(INDEX_HTML));     
  });
  server.begin();                                   
  Serial.println("WebServer initiated...");  

  webSocket.begin();
  /*Event of the WebSocket*/
  webSocket.onEvent(WebSocketEvent_vd);
  
  //Print starting system gains, can be changed though the virtual COM
  dagorData.news=false;
  inverseKinematics(0,190);
  Serial.print("Motor A angle: "+String(angleA));Serial.print("Motor B angle: "+String(angleB));
  angleA=0;
  angleB=0;
  precA=0;
  precB=0;
}

void loop() {
 

 
  
  //Function intended to be used with serial plotter to monitor motor variables, significantly slowing the execution down!!!!
  //motor_monitor();

  // STATE MACHINE
  if ((machineState == 0)&&(primo_avvio==false)&&(coordenadas[1]!=0)){   //Default, Robot control through wifi controller
    inverseKinematics(posX_joy, posY_joy);
    //motor.move(angleA);
    //motorB.move(angleB);
   
    
 
   angleA=(angleA*13.6);
   angleB=(angleB*13.6);
    
    
    //esp_err_t result = esp_now_send(broadcastAddress1, (uint8_t *) &dagorData, sizeof(dagorData));
    if (precA!=angleA) {
             //  Serial.print("Motor A angle: "+String(angleA));Serial.print("Motor B angle: "+String(angleB));
               //Serial.println();
               //invio cordinate
               pack_cmd();
               precA = angleA; 
               precB =angleB; 
        }
    
  }
  else if ( machineState == 3){   //Saved positions DEMO
     //motor.move(posA[sp]);
     //motorB.move(posB[sp]);
    
    
     //esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &dagorData, sizeof(dagorData));
     //esp_err_t result1 = esp_now_send(broadcastAddress1, (uint8_t *) &dagorData, sizeof(dagorData));
  }
  else if ( machineState == 6){   //Circle DEMO
    //motor.move(circleA[sp]+0.6);
    //motorB.move(circleB[sp]+0.6);

     
     //esp_err_t result1 = esp_now_send(broadcastAddress1, (uint8_t *) &dagorData, sizeof(dagorData));
     
  }
  else if ( machineState == 7){   //Coins DEMO
    //motor.move(coinsA[sp]);
    //motorB.move(coinsB[sp]);
    
   
  }


  //Time managment for dinamic movement DEMOs
  runTime = micros();
  timeDif = runTime - prevT;  //How much time each loop takes
  prevT = runTime;
  stateT += timeDif;

  if(sp == limit){
    sp = 0 ;
  }
  
  if(stateT >= timeInterval && (machineState == 6 || machineState == 7 || machineState == 3 )){
    sp += 1;
    stateT = 0;
    //Serial.println(sp);
  }
  
  server.handleClient();
  webSocket.loop();                                       
  handleData();
}

//Inverse kinematic model. Accepts x and y positions [mm] from the virtual joystick and returns motors' angles [rad].
void inverseKinematics(int posX, int posY){
   /* if (posX == 0 && posY == 0){
    posX = 330;
    posY = 390;
  }*/
  //if ((posX==0)&&(posY==190)){
  //  angleA=0;
  ////  angleA=0;
 // }else{
  //if (posY < 0) posY = 1;
  //posX = (posX - 330);
  //posY = 400 - posY;
  //if (posY <= 0) posY = 0;
  
  float dA = sqrt((posY*posY)+(((l0/2)+posX)*((l0/2)+posX)));
  float argA = ((dA*dA)+(l1*l1)-(l2*l2))/(2*dA*l1);
  if (argA >= 1) argA = 1;
  else if (argA <= 0) argA = 0;
  float phiA = acos(argA);
  float thetaA = atan2(posY,((l0/2)+posX));
//  if (posY <= 190){
    
   // angleA = -( PI- (thetaA + phiA))+0.5;
    //angleA = angleA*-1;
  //}
 // else{
    angleA = ( PI - (thetaA + phiA ));//-0.5;
 // }

  
  float dB = sqrt((posY*posY)+(((l0/2)-posX)*((l0/2)-posX)));
  float argB = ((dB*dB)+(l4*l4)-(l3*l3))/(2*dB*l4);
  if (argB >= 1) argB = 1;
  else if (argB <= 0) argB = 0;
  float phiB = acos(argB);
  float thetaB = atan2(posY,((l0/2)-posX));
 // if (posY <= 190){
    
 //   angleB = (PI-(thetaB + phiB))-0.5;
 // }
 // else{
    angleB = -( PI -(thetaB + phiB ));//+0.5;
  //}
   
  //Serial.print("posX: ");
  //Serial.print(posX);
  //Serial.print(", posY: ");
  //Serial.print(posY);
  //Serial.println(thetaA);
  //Serial.println(dA);
  //Serial.println(argA);
  //Serial.println(phiA);
  //Serial.print(", angleA: ");
  //Serial.print(angleA);
  //Serial.print(", angleB: ");
  //Serial.println(angleB);
 //   }
}

//Function that manages each button input
void handleData(){
  if(dagorData.news==true){
    for(int z=0;z<=8;z++){
      dagorData.conf[z]=comando_da_utente[z];
    }
    Serial.println("comando mot"+String(dagorData.conf));
  }else{
  if (coordenadas[0]!= posX_joy || coordenadas[1]!=posY_joy)
  {
    /*Serial.print("X:");
    Serial.print(coordenadas[0]);
    Serial.print("\t");
    Serial.print("Y:");
    Serial.println(coordenadas[1]);*/
  }
  if(coordenadas[2]==1 && save!=coordenadas[2]){
    Serial.println("Position saved");
    posA[savedIndex] = precA;
    posB[savedIndex] = precB;
    Serial.print("Motor A angle: ");
    Serial.println(posA[savedIndex]);
    Serial.print("Motor B angle: ");
    Serial.println(posB[savedIndex]);
    Serial.print("Saved Position Index: ");
    Serial.println(savedIndex);
    savedIndex += 1;
  }
  else if(coordenadas[3]==1 && play!=coordenadas[3] ){
    if(posA[0] == 0 && posB[0] == 0){
      Serial.println("No points saved.");
    }
    else{
      Serial.println("Play saved positions");
      timeInterval = 500000;
      limit = savedIndex;
      sp = 0;
     
      machineState = 3;
    }
  }
  else if(coordenadas[4]==1 && stap!=coordenadas[4]){
    Serial.println("Stop");
   
   
    angleA=0;
    angleB=0;
    machineState = 0;
    
  }
  else if(coordenadas[5]==1 && reset!=coordenadas[5]){
    Serial.println("Reset saved positions");
    savedIndex = 0;
    limit = 0;
    sp = 0;
    
   
    machineState = 0;
    memset(posA, 0, sizeof(posA));
    memset(posB, 0, sizeof(posB));
  }
  else if(coordenadas[6]==1 && demoC!=coordenadas[6]){
    Serial.println("Circle DEMO");
    limit = 100;
    timeInterval = 15000;
    sp = 0;
    machineState = 6;
  }
  else if(coordenadas[7]==1 && demoM!=coordenadas[7]){
    Serial.println("Coins DEMO");
    limit = 4;
    timeInterval = 500000;
    sp = 0;
    machineState = 7;
  }

  posX_joy=coordenadas[0];
  posY_joy=coordenadas[1];
  save = coordenadas[2];
  play = coordenadas[3];
  stap = coordenadas[4];
  reset = coordenadas[5];
  demoC = coordenadas[6];
  demoM = coordenadas[7];
  }
}



//Web sockets event handle. Transforms the values recieved from the webpage into an array.
void WebSocketEvent_vd(uint8_t num_u8s, WStype_t type_ws, uint8_t *payload_u8sp, size_t length) {
    switch(type_ws) 
    {
        /*When there is a new connection sends a string of "0"*/
        case WStype_CONNECTED: 
        {
          Serial.println("Client connected.");
          primo_avvio=false;
        }
        break;
        /*When there is a new connection sends a string of "0"*/
        case WStype_DISCONNECTED:
        {
          Serial.println("Client disconnected.");
        }
        break;
        /*When there is new data available from the HTML*/
        case WStype_TEXT:
        {
            dataJoy = (char*)payload_u8sp;  
            if ((dataJoy[0]=='A')||(dataJoy[0]=='B')) {
              comando_da_utente=dataJoy;
              dagorData.news=true; 
            }else{
            char delimiter [] = " ";
            char* rest = strtok (dataJoy, delimiter);
            i=0; 
            while(rest != NULL) 
            {
              coordenadas[i]=atoi(rest);
              rest = strtok(NULL, delimiter);
              i++;
            }
            dagorData.news=false; 
            }
             
         
        }
        break;
        
        /*When there is an error in the WebSocket communication*/
        case WStype_ERROR:                                                                
        {
        }
        break;
    }
}

void pack_cmd(){
  byte bufA[8];
  byte bufB[8];

  /// CAN Command Packet Structure ///
  /// 16 bit position command, between -4*pi and 4*pi
  /// 12 bit velocity command, between -30 and + 30 rad/s
  /// 12 bit kp, between 0 and 500 N-m/rad
  /// 12 bit kd, between 0 and 100 N-m*s/rad
  /// 12 bit feed forward torque, between -18 and 18 N-m
  /// CAN Packet is 8 8-bit words
  /// Formatted as follows.  For each quantity, bit 0 is LSB
  /// 0: [position[15-8]]
  /// 1: [position[7-0]] 
  /// 2: [velocity[11-4]]
  /// 3: [velocity[3-0], kp[11-8]]
  /// 4: [kp[7-0]]
  /// 5: [kd[11-4]]
  /// 6: [kd[3-0], torque[11-8]]
  /// 7: [torque[7-0]]
  if (dagorData.news==false){
  /// limit data to be within bounds ///
  /*float p_des = constrain(angleA, P_MIN, P_MAX); //fminf(fmaxf(P_MIN, p_in), P_MAX);                    
  float v_des = constrain(angleB, V_MIN, V_MAX); //fminf(fmaxf(V_MIN, v_in), V_MAX);
 
  /// convert floats to unsigned ints ///
  Serial.println("angoloA "+String(p_des));
  Serial.println("angoloB "+String(v_des));
  unsigned int p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);            
  unsigned int v_int = float_to_uint(v_des, V_MIN, V_MAX, 16);
 
  /// pack ints into the can buffer ///
*/
 /* buf[0] = p_int >> 8;                                       
  buf[1] = p_int & 0xFF;
  buf[2] = v_int >> 8;
  buf[3] = v_int & 0xFF;*/
  angoloStringa=String(angleA);
  for (i=0;i<=7;i++){
    bufA[i]=angoloStringa[i];
  }
  angoloStringa=String(angleB);
  for (i=0;i<=7;i++){
    bufB[i]=angoloStringa[i];
  }
  CAN.sendMsgBuf(0x01, 0, 8, bufA);
  CAN.sendMsgBuf(0x02, 0, 8, bufB);
 // Serial.println("inviato");
  }else{
    if (invioA==true){
    Serial.println("invio su can");  
    CAN.sendMsgBuf(0x02, 0, 8,inviosetup);
    ab=false;
    invioA=false;
    Serial.println("ab false inviato");
    }
    if (invioB==true){
    CAN.sendMsgBuf(0x03, 0, 8,inviosetup);
    ab=false;
    invioB=false;
    }
  }
}

unsigned int float_to_uint(float x, float x_min, float x_max, int bits){
  /// Converts a float to an unsigned int, given range and number of bits ///
  float span = x_max - x_min;
  float offset = x_min;
  unsigned int pgg = 0;
  if (bits == 12){
    pgg = (unsigned int) ((x-offset)*4095.0/span);
  }
  if (bits == 16){
    pgg = (unsigned int) ((x-offset)*65535.0/span);
  }
  return pgg;
}
